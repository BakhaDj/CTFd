/*! For license information please see statistics.dev.js.LICENSE.txt */
!function(n){function e(e){for(var r,s,i=e[0],u=e[1],l=e[2],f=0,p=[];f<i.length;f++)s=i[f],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&p.push(a[s][0]),a[s]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(n[r]=u[r]);for(c&&c(e);p.length;)p.shift()();return o.push.apply(o,l||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,i=1;i<t.length;i++){var u=t[i];0!==a[u]&&(r=!1)}r&&(o.splice(e--,1),n=s(s.s=t[0]))}return n}var r={},a={"pages/statistics":0},o=[];function s(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=n,s.c=r,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)s.d(t,r,function(e){return n[e]}.bind(null,r));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/themes/admin/static/js";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=e,i=i.slice();for(var l=0;l<i.length;l++)e(i[l]);var c=u;o.push(["./CTFd/themes/admin/assets/js/pages/statistics.js","helpers","graphs","plotly","vendor","default~pages/challenge~pages/challenges~pages/configs~pages/editor~pages/main~pages/notifications~p~d5a3cc0a"]),t()}({"./CTFd/themes/admin/assets/js/pages/statistics.js":function(module,exports,__webpack_require__){eval('\n\n__webpack_require__(/*! ./main */ "./CTFd/themes/admin/assets/js/pages/main.js");\n\n__webpack_require__(/*! core/utils */ "./CTFd/themes/core/assets/js/utils.js");\n\nvar _CTFd = _interopRequireDefault(__webpack_require__(/*! core/CTFd */ "./CTFd/themes/core/assets/js/CTFd.js"));\n\nvar _jquery = _interopRequireDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));\n\nvar _plotly = _interopRequireDefault(__webpack_require__(/*! plotly.js-basic-dist */ "./node_modules/plotly.js-basic-dist/plotly-basic.js"));\n\nvar _graphs = __webpack_require__(/*! core/graphs */ "./CTFd/themes/core/assets/js/graphs.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar graph_configs = {\n  "#solves-graph": {\n    layout: function layout(annotations) {\n      return {\n        title: "Solve Counts",\n        annotations: annotations,\n        xaxis: {\n          title: "Challenge Name"\n        },\n        yaxis: {\n          title: "Amount of Solves"\n        }\n      };\n    },\n    fn: function fn() {\n      return "CTFd_solves_" + new Date().toISOString().slice(0, 19);\n    },\n    data: function data() {\n      return _CTFd.default.api.get_challenge_solve_statistics();\n    },\n    format: function format(response) {\n      var data = response.data;\n      var chals = [];\n      var counts = [];\n      var annotations = [];\n      var solves = {};\n\n      for (var c = 0; c < data.length; c++) {\n        solves[data[c]["id"]] = {\n          name: data[c]["name"],\n          solves: data[c]["solves"]\n        };\n      }\n\n      var solves_order = Object.keys(solves).sort(function (a, b) {\n        return solves[b].solves - solves[a].solves;\n      });\n\n      _jquery.default.each(solves_order, function (key, value) {\n        chals.push(solves[value].name);\n        counts.push(solves[value].solves);\n        var result = {\n          x: solves[value].name,\n          y: solves[value].solves,\n          text: solves[value].solves,\n          xanchor: "center",\n          yanchor: "bottom",\n          showarrow: false\n        };\n        annotations.push(result);\n      });\n\n      return [{\n        type: "bar",\n        x: chals,\n        y: counts,\n        text: counts,\n        orientation: "v"\n      }, annotations];\n    }\n  },\n  "#keys-pie-graph": {\n    layout: function layout() {\n      return {\n        title: "Submission Percentages"\n      };\n    },\n    fn: function fn() {\n      return "CTFd_submissions_" + new Date().toISOString().slice(0, 19);\n    },\n    data: function data() {\n      return _CTFd.default.api.get_submission_property_counts({\n        column: "type"\n      });\n    },\n    format: function format(response) {\n      var data = response.data;\n      var solves = data["correct"];\n      var fails = data["incorrect"];\n      return [{\n        values: [solves, fails],\n        labels: ["Correct", "Incorrect"],\n        marker: {\n          colors: ["rgb(0, 209, 64)", "rgb(207, 38, 0)"]\n        },\n        text: ["Solves", "Fails"],\n        hole: 0.4,\n        type: "pie"\n      }, null];\n    }\n  },\n  "#categories-pie-graph": {\n    layout: function layout() {\n      return {\n        title: "Category Breakdown"\n      };\n    },\n    data: function data() {\n      return _CTFd.default.api.get_challenge_property_counts({\n        column: "category"\n      });\n    },\n    fn: function fn() {\n      return "CTFd_categories_" + new Date().toISOString().slice(0, 19);\n    },\n    format: function format(response) {\n      var data = response.data;\n      var categories = [];\n      var count = [];\n\n      for (var category in data) {\n        if (data.hasOwnProperty(category)) {\n          categories.push(category);\n          count.push(data[category]);\n        }\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        categories.push(data[i].category);\n        count.push(data[i].count);\n      }\n\n      return [{\n        values: count,\n        labels: categories,\n        hole: 0.4,\n        type: "pie"\n      }, null];\n    }\n  },\n  "#solve-percentages-graph": {\n    layout: function layout(annotations) {\n      return {\n        title: "Solve Percentages per Challenge",\n        xaxis: {\n          title: "Challenge Name"\n        },\n        yaxis: {\n          title: "Percentage of {0} (%)".format(_CTFd.default.config.userMode.charAt(0).toUpperCase() + _CTFd.default.config.userMode.slice(1)),\n          range: [0, 100]\n        },\n        annotations: annotations\n      };\n    },\n    data: function data() {\n      return _CTFd.default.api.get_challenge_solve_percentages();\n    },\n    fn: function fn() {\n      return "CTFd_challenge_percentages_" + new Date().toISOString().slice(0, 19);\n    },\n    format: function format(response) {\n      var data = response.data;\n      var names = [];\n      var percents = [];\n      var annotations = [];\n\n      for (var key in data) {\n        names.push(data[key].name);\n        percents.push(data[key].percentage * 100);\n        var result = {\n          x: data[key].name,\n          y: data[key].percentage * 100,\n          text: Math.round(data[key].percentage * 100) + "%",\n          xanchor: "center",\n          yanchor: "bottom",\n          showarrow: false\n        };\n        annotations.push(result);\n      }\n\n      return [{\n        type: "bar",\n        x: names,\n        y: percents,\n        orientation: "v"\n      }, annotations];\n    }\n  },\n  "#score-distribution-graph": {\n    layout: function layout(annotations) {\n      return {\n        title: "Score Distribution",\n        xaxis: {\n          title: "Score Bracket",\n          showticklabels: true,\n          type: "category"\n        },\n        yaxis: {\n          title: "Number of {0}".format(_CTFd.default.config.userMode.charAt(0).toUpperCase() + _CTFd.default.config.userMode.slice(1))\n        },\n        annotations: annotations\n      };\n    },\n    data: function data() {\n      return _CTFd.default.fetch("/api/v1/statistics/scores/distribution").then(function (response) {\n        return response.json();\n      });\n    },\n    fn: function fn() {\n      return "CTFd_score_distribution_" + new Date().toISOString().slice(0, 19);\n    },\n    format: function format(response) {\n      var data = response.data.brackets;\n      var keys = [];\n      var brackets = [];\n      var sizes = [];\n\n      for (var key in data) {\n        keys.push(parseInt(key));\n      }\n\n      keys.sort(function (a, b) {\n        return a - b;\n      });\n      var start = "<0";\n      keys.map(function (key) {\n        brackets.push("{0} - {1}".format(start, key));\n        sizes.push(data[key]);\n        start = key;\n      });\n      return [{\n        type: "bar",\n        x: brackets,\n        y: sizes,\n        orientation: "v"\n      }];\n    }\n  }\n};\nvar config = {\n  displaylogo: false,\n  responsive: true\n};\n\nvar createGraphs = function createGraphs() {\n  var _loop = function _loop(key) {\n    var cfg = graph_configs[key];\n    var $elem = (0, _jquery.default)(key);\n    $elem.empty();\n    $elem[0].fn = cfg.fn();\n    cfg.data().then(cfg.format).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          data = _ref2[0],\n          annotations = _ref2[1];\n\n      _plotly.default.newPlot($elem[0], [data], cfg.layout(annotations), config);\n    });\n  };\n\n  for (var key in graph_configs) {\n    _loop(key);\n  }\n};\n\nfunction updateGraphs() {\n  var _loop2 = function _loop2(key) {\n    var cfg = graph_configs[key];\n    var $elem = (0, _jquery.default)(key);\n    cfg.data().then(cfg.format).then(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          data = _ref4[0],\n          annotations = _ref4[1];\n\n      // FIXME: Pass annotations\n      _plotly.default.react($elem[0], [data], cfg.layout(annotations), config);\n    });\n  };\n\n  for (var key in graph_configs) {\n    _loop2(key);\n  }\n}\n\n(0, _jquery.default)(function () {\n  createGraphs();\n  setInterval(updateGraphs, 300000);\n});\n\n//# sourceURL=webpack:///./CTFd/themes/admin/assets/js/pages/statistics.js?')}});