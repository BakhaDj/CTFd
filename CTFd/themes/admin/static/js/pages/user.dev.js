/*! For license information please see user.dev.js.LICENSE.txt */
!function(e){function n(n){for(var t,i,o=n[0],u=n[1],l=n[2],c=0,p=[];c<o.length;c++)i=o[c],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&p.push(a[i][0]),a[i]=0;for(t in u)Object.prototype.hasOwnProperty.call(u,t)&&(e[t]=u[t]);for(d&&d(n);p.length;)p.shift()();return s.push.apply(s,l||[]),r()}function r(){for(var e,n=0;n<s.length;n++){for(var r=s[n],t=!0,o=1;o<r.length;o++){var u=r[o];0!==a[u]&&(t=!1)}t&&(s.splice(n--,1),e=i(i.s=r[0]))}return e}var t={},a={"pages/user":0},s=[];function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,n,r){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)i.d(r,t,function(n){return e[n]}.bind(null,t));return r},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="/themes/admin/static/js";var o=window.webpackJsonp=window.webpackJsonp||[],u=o.push.bind(o);o.push=n,o=o.slice();for(var l=0;l<o.length;l++)n(o[l]);var d=u;s.push(["./CTFd/themes/admin/assets/js/pages/user.js","helpers","graphs","plotly","vendor","default~pages/challenge~pages/challenges~pages/configs~pages/editor~pages/main~pages/notifications~p~d5a3cc0a"]),r()}({"./CTFd/themes/admin/assets/js/pages/user.js":function(module,exports,__webpack_require__){eval('\n\n__webpack_require__(/*! ./main */ "./CTFd/themes/admin/assets/js/pages/main.js");\n\nvar _jquery = _interopRequireDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));\n\nvar _CTFd = _interopRequireDefault(__webpack_require__(/*! core/CTFd */ "./CTFd/themes/core/assets/js/CTFd.js"));\n\nvar _utils = __webpack_require__(/*! core/utils */ "./CTFd/themes/core/assets/js/utils.js");\n\nvar _ezq = __webpack_require__(/*! core/ezq */ "./CTFd/themes/core/assets/js/ezq.js");\n\nvar _graphs = __webpack_require__(/*! core/graphs */ "./CTFd/themes/core/assets/js/graphs.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction createUser(event) {\n  event.preventDefault();\n  var params = (0, _jquery.default)("#user-info-create-form").serializeJSON(true); // Move the notify value into a GET param\n\n  var url = "/api/v1/users";\n  var notify = params.notify;\n\n  if (notify === true) {\n    url = "".concat(url, "?notify=true");\n  }\n\n  delete params.notify;\n\n  _CTFd.default.fetch(url, {\n    method: "POST",\n    credentials: "same-origin",\n    headers: {\n      Accept: "application/json",\n      "Content-Type": "application/json"\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.success) {\n      var user_id = response.data.id;\n      window.location = _CTFd.default.config.urlRoot + "/admin/users/" + user_id;\n    } else {\n      (0, _jquery.default)("#user-info-create-form > #results").empty();\n      Object.keys(response.errors).forEach(function (key, index) {\n        (0, _jquery.default)("#user-info-create-form > #results").append((0, _ezq.ezBadge)({\n          type: "error",\n          body: response.errors[key]\n        }));\n        var i = (0, _jquery.default)("#user-info-form").find("input[name={0}]".format(key));\n        var input = (0, _jquery.default)(i);\n        input.addClass("input-filled-invalid");\n        input.removeClass("input-filled-valid");\n      });\n    }\n  });\n}\n\nfunction updateUser(event) {\n  event.preventDefault();\n  var params = (0, _jquery.default)("#user-info-edit-form").serializeJSON(true);\n\n  _CTFd.default.fetch("/api/v1/users/" + USER_ID, {\n    method: "PATCH",\n    credentials: "same-origin",\n    headers: {\n      Accept: "application/json",\n      "Content-Type": "application/json"\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.success) {\n      window.location.reload();\n    } else {\n      (0, _jquery.default)("#user-info-edit-form > #results").empty();\n      Object.keys(response.errors).forEach(function (key, index) {\n        (0, _jquery.default)("#user-info-edit-form > #results").append((0, _ezq.ezBadge)({\n          type: "error",\n          body: response.errors[key]\n        }));\n        var i = (0, _jquery.default)("#user-info-edit-form").find("input[name={0}]".format(key));\n        var input = (0, _jquery.default)(i);\n        input.addClass("input-filled-invalid");\n        input.removeClass("input-filled-valid");\n      });\n    }\n  });\n}\n\nfunction deleteUser(event) {\n  event.preventDefault();\n  (0, _ezq.ezQuery)({\n    title: "Delete User",\n    body: "Are you sure you want to delete {0}".format("<strong>" + (0, _utils.htmlEntities)(USER_NAME) + "</strong>"),\n    success: function success() {\n      _CTFd.default.fetch("/api/v1/users/" + USER_ID, {\n        method: "DELETE"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          window.location = _CTFd.default.config.urlRoot + "/admin/users";\n        }\n      });\n    }\n  });\n}\n\nfunction awardUser(event) {\n  event.preventDefault();\n  var params = (0, _jquery.default)("#user-award-form").serializeJSON(true);\n  params["user_id"] = USER_ID;\n\n  _CTFd.default.fetch("/api/v1/awards", {\n    method: "POST",\n    credentials: "same-origin",\n    headers: {\n      Accept: "application/json",\n      "Content-Type": "application/json"\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.success) {\n      window.location.reload();\n    } else {\n      (0, _jquery.default)("#user-award-form > #results").empty();\n      Object.keys(response.errors).forEach(function (key, index) {\n        (0, _jquery.default)("#user-award-form > #results").append((0, _ezq.ezBadge)({\n          type: "error",\n          body: response.errors[key]\n        }));\n        var i = (0, _jquery.default)("#user-award-form").find("input[name={0}]".format(key));\n        var input = (0, _jquery.default)(i);\n        input.addClass("input-filled-invalid");\n        input.removeClass("input-filled-valid");\n      });\n    }\n  });\n}\n\nfunction emailUser(event) {\n  event.preventDefault();\n  var params = (0, _jquery.default)("#user-mail-form").serializeJSON(true);\n\n  _CTFd.default.fetch("/api/v1/users/" + USER_ID + "/email", {\n    method: "POST",\n    credentials: "same-origin",\n    headers: {\n      Accept: "application/json",\n      "Content-Type": "application/json"\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    if (response.success) {\n      (0, _jquery.default)("#user-mail-form > #results").append((0, _ezq.ezBadge)({\n        type: "success",\n        body: "E-Mail sent successfully!"\n      }));\n      (0, _jquery.default)("#user-mail-form").find("input[type=text], textarea").val("");\n    } else {\n      (0, _jquery.default)("#user-mail-form > #results").empty();\n      Object.keys(response.errors).forEach(function (key, index) {\n        (0, _jquery.default)("#user-mail-form > #results").append((0, _ezq.ezBadge)({\n          type: "error",\n          body: response.errors[key]\n        }));\n        var i = (0, _jquery.default)("#user-mail-form").find("input[name={0}], textarea[name={0}]".format(key));\n        var input = (0, _jquery.default)(i);\n        input.addClass("input-filled-invalid");\n        input.removeClass("input-filled-valid");\n      });\n    }\n  });\n}\n\nfunction deleteSelectedSubmissions(event, target) {\n  var submissions;\n  var type;\n  var title;\n\n  switch (target) {\n    case "solves":\n      submissions = (0, _jquery.default)("input[data-submission-type=correct]:checked");\n      type = "solve";\n      title = "Solves";\n      break;\n\n    case "fails":\n      submissions = (0, _jquery.default)("input[data-submission-type=incorrect]:checked");\n      type = "fail";\n      title = "Fails";\n      break;\n\n    default:\n      break;\n  }\n\n  var submissionIDs = submissions.map(function () {\n    return (0, _jquery.default)(this).data("submission-id");\n  });\n  var target_string = submissionIDs.length === 1 ? type : type + "s";\n  (0, _ezq.ezQuery)({\n    title: "Delete ".concat(title),\n    body: "Are you sure you want to delete ".concat(submissionIDs.length, " ").concat(target_string, "?"),\n    success: function success() {\n      var reqs = [];\n\n      var _iterator = _createForOfIteratorHelper(submissionIDs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subId = _step.value;\n          reqs.push(_CTFd.default.api.delete_submission({\n            submissionId: subId\n          }));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      Promise.all(reqs).then(function (responses) {\n        window.location.reload();\n      });\n    }\n  });\n}\n\nfunction deleteSelectedAwards(event) {\n  var awardIDs = (0, _jquery.default)("input[data-award-id]:checked").map(function () {\n    return (0, _jquery.default)(this).data("award-id");\n  });\n  var target = awardIDs.length === 1 ? "award" : "awards";\n  (0, _ezq.ezQuery)({\n    title: "Delete Awards",\n    body: "Are you sure you want to delete ".concat(awardIDs.length, " ").concat(target, "?"),\n    success: function success() {\n      var reqs = [];\n\n      var _iterator2 = _createForOfIteratorHelper(awardIDs),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var awardID = _step2.value;\n\n          var req = _CTFd.default.fetch("/api/v1/awards/" + awardID, {\n            method: "DELETE",\n            credentials: "same-origin",\n            headers: {\n              Accept: "application/json",\n              "Content-Type": "application/json"\n            }\n          });\n\n          reqs.push(req);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      Promise.all(reqs).then(function (responses) {\n        window.location.reload();\n      });\n    }\n  });\n}\n\nfunction solveSelectedMissingChallenges(event) {\n  event.preventDefault();\n  var challengeIDs = (0, _jquery.default)("input[data-missing-challenge-id]:checked").map(function () {\n    return (0, _jquery.default)(this).data("missing-challenge-id");\n  });\n  var target = challengeIDs.length === 1 ? "challenge" : "challenges";\n  (0, _ezq.ezQuery)({\n    title: "Mark Correct",\n    body: "Are you sure you want to mark ".concat(challengeIDs.length, " correct for ").concat((0, _utils.htmlEntities)(USER_NAME), "?"),\n    success: function success() {\n      var reqs = [];\n\n      var _iterator3 = _createForOfIteratorHelper(challengeIDs),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var challengeID = _step3.value;\n          var params = {\n            provided: "MARKED AS SOLVED BY ADMIN",\n            user_id: USER_ID,\n            team_id: TEAM_ID,\n            challenge_id: challengeID,\n            type: "correct"\n          };\n\n          var req = _CTFd.default.fetch("/api/v1/submissions", {\n            method: "POST",\n            credentials: "same-origin",\n            headers: {\n              Accept: "application/json",\n              "Content-Type": "application/json"\n            },\n            body: JSON.stringify(params)\n          });\n\n          reqs.push(req);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      Promise.all(reqs).then(function (responses) {\n        window.location.reload();\n      });\n    }\n  });\n}\n\nvar api_funcs = {\n  team: [function (x) {\n    return _CTFd.default.api.get_team_solves({\n      teamId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_team_fails({\n      teamId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_team_awards({\n      teamId: x\n    });\n  }],\n  user: [function (x) {\n    return _CTFd.default.api.get_user_solves({\n      userId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_user_fails({\n      userId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_user_awards({\n      userId: x\n    });\n  }]\n};\n\nvar createGraphs = function createGraphs(type, id, name, account_id) {\n  var _api_funcs$type = _slicedToArray(api_funcs[type], 3),\n      solves_func = _api_funcs$type[0],\n      fails_func = _api_funcs$type[1],\n      awards_func = _api_funcs$type[2];\n\n  Promise.all([solves_func(account_id), fails_func(account_id), awards_func(account_id)]).then(function (responses) {\n    (0, _graphs.createGraph)("score_graph", "#score-graph", responses, type, id, name, account_id);\n    (0, _graphs.createGraph)("category_breakdown", "#categories-pie-graph", responses, type, id, name, account_id);\n    (0, _graphs.createGraph)("solve_percentages", "#keys-pie-graph", responses, type, id, name, account_id);\n  });\n};\n\nvar updateGraphs = function updateGraphs(type, id, name, account_id) {\n  var _api_funcs$type2 = _slicedToArray(api_funcs[type], 3),\n      solves_func = _api_funcs$type2[0],\n      fails_func = _api_funcs$type2[1],\n      awards_func = _api_funcs$type2[2];\n\n  Promise.all([solves_func(account_id), fails_func(account_id), awards_func(account_id)]).then(function (responses) {\n    (0, _graphs.updateGraph)("score_graph", "#score-graph", responses, type, id, name, account_id);\n    (0, _graphs.updateGraph)("category_breakdown", "#categories-pie-graph", responses, type, id, name, account_id);\n    (0, _graphs.updateGraph)("solve_percentages", "#keys-pie-graph", responses, type, id, name, account_id);\n  });\n};\n\n(0, _jquery.default)(function () {\n  (0, _jquery.default)(".delete-user").click(deleteUser);\n  (0, _jquery.default)(".edit-user").click(function (event) {\n    (0, _jquery.default)("#user-info-modal").modal("toggle");\n  });\n  (0, _jquery.default)(".award-user").click(function (event) {\n    (0, _jquery.default)("#user-award-modal").modal("toggle");\n  });\n  (0, _jquery.default)(".email-user").click(function (event) {\n    (0, _jquery.default)("#user-email-modal").modal("toggle");\n  });\n  (0, _jquery.default)(".addresses-user").click(function (event) {\n    (0, _jquery.default)("#user-addresses-modal").modal("toggle");\n  });\n  (0, _jquery.default)("#user-mail-form").submit(emailUser);\n  (0, _jquery.default)("#solves-delete-button").click(function (e) {\n    deleteSelectedSubmissions(e, "solves");\n  });\n  (0, _jquery.default)("#fails-delete-button").click(function (e) {\n    deleteSelectedSubmissions(e, "fails");\n  });\n  (0, _jquery.default)("#awards-delete-button").click(function (e) {\n    deleteSelectedAwards(e);\n  });\n  (0, _jquery.default)("#missing-solve-button").click(function (e) {\n    solveSelectedMissingChallenges(e);\n  });\n  (0, _jquery.default)("#user-info-create-form").submit(createUser);\n  (0, _jquery.default)("#user-info-edit-form").submit(updateUser);\n  (0, _jquery.default)("#user-award-form").submit(awardUser);\n  var type, id, name, account_id;\n  var _window$stats_data = window.stats_data;\n  type = _window$stats_data.type;\n  id = _window$stats_data.id;\n  name = _window$stats_data.name;\n  account_id = _window$stats_data.account_id;\n  createGraphs(type, id, name, account_id);\n  setInterval(function () {\n    updateGraphs(type, id, name, account_id);\n  }, 300000);\n});\n\n//# sourceURL=webpack:///./CTFd/themes/admin/assets/js/pages/user.js?')}});