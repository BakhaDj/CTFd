/*! For license information please see stats.dev.js.LICENSE.txt */
!function(e){function n(n){for(var r,s,i=n[0],c=n[1],u=n[2],p=0,l=[];p<i.length;p++)s=i[p],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&l.push(a[s][0]),a[s]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(_&&_(n);l.length;)l.shift()();return o.push.apply(o,u||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],r=!0,i=1;i<t.length;i++){var c=t[i];0!==a[c]&&(r=!1)}r&&(o.splice(n--,1),e=s(s.s=t[0]))}return e}var r={},a={"pages/stats":0},o=[];function s(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=e,s.c=r,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)s.d(t,r,function(n){return e[n]}.bind(null,r));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="/themes/core/static/js";var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=n,i=i.slice();for(var u=0;u<i.length;u++)n(i[u]);var _=c;o.push(["./CTFd/themes/core/assets/js/pages/stats.js","helpers","plotly","vendor","default~pages/challenges~pages/main~pages/notifications~pages/scoreboard~pages/settings~pages/setup~~6822bf1f"]),t()}({"./CTFd/themes/core/assets/js/graphs.js":function(module,exports,__webpack_require__){eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.createGraph = createGraph;\nexports.updateGraph = updateGraph;\n\nvar _jquery = _interopRequireDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));\n\nvar _plotly = _interopRequireDefault(__webpack_require__(/*! plotly.js-basic-dist */ "./node_modules/plotly.js-basic-dist/plotly-basic.js"));\n\nvar _moment = _interopRequireDefault(__webpack_require__(/*! moment */ "./node_modules/moment/moment.js"));\n\nvar _utils = __webpack_require__(/*! ./utils */ "./CTFd/themes/core/assets/js/utils.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar graph_configs = {\n  score_graph: {\n    layout: {\n      title: "Score over Time",\n      paper_bgcolor: "rgba(0,0,0,0)",\n      plot_bgcolor: "rgba(0,0,0,0)",\n      hovermode: "closest",\n      xaxis: {\n        showgrid: false,\n        showspikes: true\n      },\n      yaxis: {\n        showgrid: false,\n        showspikes: true\n      },\n      legend: {\n        orientation: "h"\n      }\n    },\n    fn: function fn(type, id, name, account_id) {\n      return "CTFd_score_".concat(type, "_").concat(name, "_").concat(id, "_").concat(new Date().toISOString().slice(0, 19));\n    },\n    format: function format(type, id, name, account_id, responses) {\n      var times = [];\n      var scores = [];\n      var solves = responses[0].data;\n      var awards = responses[2].data;\n      var total = solves.concat(awards);\n      total.sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n\n      for (var i = 0; i < total.length; i++) {\n        var date = (0, _moment.default)(total[i].date);\n        times.push(date.toDate());\n\n        try {\n          scores.push(total[i].challenge.value);\n        } catch (e) {\n          scores.push(total[i].value);\n        }\n      }\n\n      return [{\n        x: times,\n        y: (0, _utils.cumulativeSum)(scores),\n        type: "scatter",\n        marker: {\n          color: (0, _utils.colorHash)(name + id)\n        },\n        line: {\n          color: (0, _utils.colorHash)(name + id)\n        },\n        fill: "tozeroy"\n      }];\n    }\n  },\n  category_breakdown: {\n    layout: {\n      title: "Category Breakdown",\n      paper_bgcolor: "rgba(0,0,0,0)",\n      plot_bgcolor: "rgba(0,0,0,0)",\n      legend: {\n        orientation: "v"\n      },\n      height: "400px"\n    },\n    fn: function fn(type, id, name, account_id) {\n      return "CTFd_submissions_".concat(type, "_").concat(name, "_").concat(id, "_").concat(new Date().toISOString().slice(0, 19));\n    },\n    format: function format(type, id, name, account_id, responses) {\n      var solves = responses[0].data;\n      var categories = [];\n\n      for (var i = 0; i < solves.length; i++) {\n        categories.push(solves[i].challenge.category);\n      }\n\n      var keys = categories.filter(function (elem, pos) {\n        return categories.indexOf(elem) == pos;\n      });\n      var counts = [];\n\n      for (var _i = 0; _i < keys.length; _i++) {\n        var count = 0;\n\n        for (var x = 0; x < categories.length; x++) {\n          if (categories[x] == keys[_i]) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return [{\n        values: counts,\n        labels: keys,\n        hole: 0.4,\n        type: "pie"\n      }];\n    }\n  },\n  solve_percentages: {\n    layout: {\n      title: "Solve Percentages",\n      paper_bgcolor: "rgba(0,0,0,0)",\n      plot_bgcolor: "rgba(0,0,0,0)",\n      legend: {\n        orientation: "h"\n      },\n      height: "400px"\n    },\n    fn: function fn(type, id, name, account_id) {\n      return "CTFd_submissions_".concat(type, "_").concat(name, "_").concat(id, "_").concat(new Date().toISOString().slice(0, 19));\n    },\n    format: function format(type, id, name, account_id, responses) {\n      var solves_count = responses[0].data.length;\n      var fails_count = responses[1].meta.count;\n      return [{\n        values: [solves_count, fails_count],\n        labels: ["Solves", "Fails"],\n        marker: {\n          colors: ["rgb(0, 209, 64)", "rgb(207, 38, 0)"]\n        },\n        hole: 0.4,\n        type: "pie"\n      }];\n    }\n  }\n};\nvar config = {\n  displaylogo: false,\n  responsive: true\n};\n\nfunction createGraph(graph_type, target, data, type, id, name, account_id) {\n  var cfg = graph_configs[graph_type];\n  var $elem = (0, _jquery.default)(target);\n  $elem.empty();\n\n  if ($elem[0] === undefined) {\n    console.log("Couldn\'t find graph target: " + target);\n    return;\n  }\n\n  $elem[0].fn = cfg.fn(type, id, name, account_id);\n  var graph_data = cfg.format(type, id, name, account_id, data);\n\n  _plotly.default.newPlot($elem[0], graph_data, cfg.layout, config);\n}\n\nfunction updateGraph(graph_type, target, data, type, id, name, account_id) {\n  var cfg = graph_configs[graph_type];\n  var $elem = (0, _jquery.default)(target);\n  var graph_data = cfg.format(type, id, name, account_id, data);\n\n  _plotly.default.update($elem[0], graph_data, cfg.layout, config);\n}\n\n//# sourceURL=webpack:///./CTFd/themes/core/assets/js/graphs.js?')},"./CTFd/themes/core/assets/js/pages/stats.js":function(module,exports,__webpack_require__){eval('\n\n__webpack_require__(/*! ./main */ "./CTFd/themes/core/assets/js/pages/main.js");\n\nvar _jquery = _interopRequireDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));\n\nvar _CTFd = _interopRequireDefault(__webpack_require__(/*! ../CTFd */ "./CTFd/themes/core/assets/js/CTFd.js"));\n\nvar _graphs = __webpack_require__(/*! ../graphs */ "./CTFd/themes/core/assets/js/graphs.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar api_funcs = {\n  team: [function (x) {\n    return _CTFd.default.api.get_team_solves({\n      teamId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_team_fails({\n      teamId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_team_awards({\n      teamId: x\n    });\n  }],\n  user: [function (x) {\n    return _CTFd.default.api.get_user_solves({\n      userId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_user_fails({\n      userId: x\n    });\n  }, function (x) {\n    return _CTFd.default.api.get_user_awards({\n      userId: x\n    });\n  }]\n};\n\nvar createGraphs = function createGraphs(type, id, name, account_id) {\n  var _api_funcs$type = _slicedToArray(api_funcs[type], 3),\n      solves_func = _api_funcs$type[0],\n      fails_func = _api_funcs$type[1],\n      awards_func = _api_funcs$type[2];\n\n  Promise.all([solves_func(account_id), fails_func(account_id), awards_func(account_id)]).then(function (responses) {\n    (0, _graphs.createGraph)("score_graph", "#score-graph", responses, type, id, name, account_id);\n    (0, _graphs.createGraph)("category_breakdown", "#categories-pie-graph", responses, type, id, name, account_id);\n    (0, _graphs.createGraph)("solve_percentages", "#keys-pie-graph", responses, type, id, name, account_id);\n  });\n};\n\nvar updateGraphs = function updateGraphs(type, id, name, account_id) {\n  var _api_funcs$type2 = _slicedToArray(api_funcs[type], 3),\n      solves_func = _api_funcs$type2[0],\n      fails_func = _api_funcs$type2[1],\n      awards_func = _api_funcs$type2[2];\n\n  Promise.all([solves_func(account_id), fails_func(account_id), awards_func(account_id)]).then(function (responses) {\n    (0, _graphs.updateGraph)("score_graph", "#score-graph", responses, type, id, name, account_id);\n    (0, _graphs.updateGraph)("category_breakdown", "#categories-pie-graph", responses, type, id, name, account_id);\n    (0, _graphs.updateGraph)("solve_percentages", "#keys-pie-graph", responses, type, id, name, account_id);\n  });\n};\n\n(0, _jquery.default)(function () {\n  var type, id, name, account_id;\n  var _window$stats_data = window.stats_data;\n  type = _window$stats_data.type;\n  id = _window$stats_data.id;\n  name = _window$stats_data.name;\n  account_id = _window$stats_data.account_id;\n  createGraphs(type, id, name, account_id);\n  setInterval(function () {\n    updateGraphs(type, id, name, account_id);\n  }, 300000);\n});\n\n//# sourceURL=webpack:///./CTFd/themes/core/assets/js/pages/stats.js?')}});