/*! For license information please see scoreboard.dev.js.LICENSE.txt */
!function(e){function n(n){for(var a,o,i=n[0],l=n[1],c=n[2],p=0,d=[];p<i.length;p++)o=i[p],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&d.push(r[o][0]),r[o]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);for(u&&u(n);d.length;)d.shift()();return s.push.apply(s,c||[]),t()}function t(){for(var e,n=0;n<s.length;n++){for(var t=s[n],a=!0,i=1;i<t.length;i++){var l=t[i];0!==r[l]&&(a=!1)}a&&(s.splice(n--,1),e=o(o.s=t[0]))}return e}var a={},r={"pages/scoreboard":0},s=[];function o(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=e,o.c=a,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)o.d(t,a,function(n){return e[n]}.bind(null,a));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="/themes/core/static/js";var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=n,i=i.slice();for(var c=0;c<i.length;c++)n(i[c]);var u=l;s.push(["./CTFd/themes/core/assets/js/pages/scoreboard.js","helpers","plotly","vendor","default~pages/challenges~pages/main~pages/notifications~pages/scoreboard~pages/settings~pages/setup~~6822bf1f"]),t()}({"./CTFd/themes/core/assets/js/pages/scoreboard.js":function(module,exports,__webpack_require__){eval('\n\n__webpack_require__(/*! ./main */ "./CTFd/themes/core/assets/js/pages/main.js");\n\nvar _jquery = _interopRequireDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));\n\nvar _CTFd = _interopRequireDefault(__webpack_require__(/*! ../CTFd */ "./CTFd/themes/core/assets/js/CTFd.js"));\n\nvar _plotly = _interopRequireDefault(__webpack_require__(/*! plotly.js-basic-dist */ "./node_modules/plotly.js-basic-dist/plotly-basic.js"));\n\nvar _moment = _interopRequireDefault(__webpack_require__(/*! moment */ "./node_modules/moment/moment.js"));\n\nvar _utils = __webpack_require__(/*! ../utils */ "./CTFd/themes/core/assets/js/utils.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar graph = (0, _jquery.default)("#score-graph");\nvar table = (0, _jquery.default)("#scoreboard tbody");\nvar config = {\n  displaylogo: false,\n  responsive: true\n};\nvar layout = {\n  title: "Top 10 " + (window.userMode === "teams" ? "Teams" : "Users"),\n  paper_bgcolor: "rgba(0,0,0,0)",\n  plot_bgcolor: "rgba(0,0,0,0)",\n  hovermode: "closest",\n  xaxis: {\n    showgrid: false,\n    showspikes: true\n  },\n  yaxis: {\n    showgrid: false,\n    showspikes: true\n  },\n  legend: {\n    orientation: "h"\n  }\n};\n\nvar updateScores = function updateScores() {\n  _CTFd.default.api.get_scoreboard_list().then(function (response) {\n    var teams = response.data;\n    table.empty();\n\n    for (var i = 0; i < teams.length; i++) {\n      var row = ["<tr>", \'<th scope="row" class="text-center">\', i + 1, "</th>", \'<td><a href="{0}/teams/{1}">\'.format(_CTFd.default.config.urlRoot, teams[i].account_id), (0, _utils.htmlEntities)(teams[i].name), "</a></td>", "<td>", teams[i].score, "</td>", "</tr>"].join("");\n      table.append(row);\n    }\n  });\n};\n\nvar createGraph = function createGraph() {\n  _CTFd.default.api.get_scoreboard_detail({\n    count: 10\n  }).then(function (response) {\n    var places = response.data;\n    var teams = Object.keys(places);\n    var traces = [];\n\n    if (teams.length === 0) {\n      // Replace spinner\n      graph.html(\'<h3 class="opacity-50 text-center w-100 justify-content-center align-self-center">No solves yet</h3>\');\n      return;\n    }\n\n    for (var i = 0; i < teams.length; i++) {\n      var team_score = [];\n      var times = [];\n\n      for (var j = 0; j < places[teams[i]]["solves"].length; j++) {\n        team_score.push(places[teams[i]]["solves"][j].value);\n        var date = (0, _moment.default)(places[teams[i]]["solves"][j].date);\n        times.push(date.toDate());\n      }\n\n      var trace = {\n        x: times,\n        y: (0, _utils.cumulativeSum)(team_score),\n        mode: "lines+markers",\n        name: places[teams[i]]["name"],\n        marker: {\n          color: (0, _utils.colorHash)(places[teams[i]]["name"] + places[teams[i]]["id"])\n        },\n        line: {\n          color: (0, _utils.colorHash)(places[teams[i]]["name"] + places[teams[i]]["id"])\n        }\n      };\n      traces.push(trace);\n    }\n\n    traces.sort(function (a, b) {\n      var score_diff = b["y"][b["y"].length - 1] - a["y"][a["y"].length - 1];\n\n      if (!score_diff) {\n        return a["x"][a["x"].length - 1] - b["x"][b["x"].length - 1];\n      }\n\n      return score_diff;\n    });\n    graph.empty(); // Remove spinners\n\n    graph[0].fn = "CTFd_scoreboard_" + new Date().toISOString().slice(0, 19);\n\n    _plotly.default.newPlot(graph[0], traces, layout, config);\n  });\n};\n\nvar updateGraph = function updateGraph() {\n  _CTFd.default.api.get_scoreboard_detail({\n    count: 10\n  }).then(function (response) {\n    var places = response.data;\n    var teams = Object.keys(places);\n    var traces = [];\n\n    if (teams.length === 0) {\n      return;\n    }\n\n    for (var i = 0; i < teams.length; i++) {\n      var team_score = [];\n      var times = [];\n\n      for (var j = 0; j < places[teams[i]]["solves"].length; j++) {\n        team_score.push(places[teams[i]]["solves"][j].value);\n        var date = (0, _moment.default)(places[teams[i]]["solves"][j].date);\n        times.push(date.toDate());\n      }\n\n      var trace = {\n        x: times,\n        y: (0, _utils.cumulativeSum)(team_score),\n        mode: "lines+markers",\n        name: places[teams[i]]["name"],\n        marker: {\n          color: (0, _utils.colorHash)(places[teams[i]]["name"] + places[teams[i]]["id"])\n        },\n        line: {\n          color: (0, _utils.colorHash)(places[teams[i]]["name"] + places[teams[i]]["id"])\n        }\n      };\n      traces.push(trace);\n    }\n\n    traces.sort(function (a, b) {\n      var score_diff = b["y"][b["y"].length - 1] - a["y"][a["y"].length - 1];\n\n      if (!score_diff) {\n        return a["x"][a["x"].length - 1] - b["x"][b["x"].length - 1];\n      }\n\n      return score_diff;\n    });\n\n    _plotly.default.react(graph[0], traces, layout, config);\n  });\n};\n\nfunction update() {\n  updateScores();\n  updateGraph();\n}\n\n(0, _jquery.default)(function () {\n  setInterval(update, 300000); // Update scores every 5 minutes\n\n  createGraph();\n  updateGraph();\n});\n\n//# sourceURL=webpack:///./CTFd/themes/core/assets/js/pages/scoreboard.js?')}});